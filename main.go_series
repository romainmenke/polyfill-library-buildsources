package main

import (
	"log"
	"os"
	"path/filepath"
	"runtime/pprof"
)

func main() {
	{
		f, err := os.Create("./go-cpu.prof")
		if err != nil {
			log.Fatal(err)
		}
		pprof.StartCPUProfile(f)
		defer pprof.StopCPUProfile()
	}

	polyfills := []*Polyfill{}

	err := os.RemoveAll("./polyfills/__dist")
	if err != nil && !os.IsNotExist(err) {
		log.Fatal(err)
	}

	err = os.MkdirAll("./polyfills/__dist", os.ModePerm)
	if err != nil {
		log.Fatal(err)
	}

	polyfillPaths, err := flattenPolyfillDirectories("./polyfills")
	if err != nil {
		log.Fatal(err)
	}

	for _, polyfillPath := range polyfillPaths {
		abspath, err := filepath.Abs(filepath.Join("./polyfills", polyfillPath))
		if err != nil {
			log.Fatal(err)
		}

		polyfill := NewPolyfill(abspath, polyfillPath)
		err = polyfill.process("./polyfills/__dist")
		if err != nil {
			log.Fatal(err)
		}

		polyfills = append(polyfills, polyfill)
	}

	err = checkForCircularDependencies(polyfills)
	if err != nil {
		log.Fatal(err)
	}

	err = checkDependenciesExist(polyfills)
	if err != nil {
		log.Fatal(err)
	}

	err = writeAliasFile(polyfills, "./polyfills/__dist")
	if err != nil {
		log.Fatal(err)
	}
}
